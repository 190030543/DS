{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Helloworld\n"
     ]
    }
   ],
   "source": [
    "print(\"Helloworld\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<mysql.connector.connection_cext.CMySQLConnection object at 0x000002CB2E2025F8>\n"
     ]
    }
   ],
   "source": [
    "#Connection from mySQL to Python\n",
    "import mysql.connector  \n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\")\n",
    "print(myconn) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<mysql.connector.connection_cext.CMySQLConnection object at 0x000002CB2E366128>\n"
     ]
    }
   ],
   "source": [
    "#Creation of Database\n",
    "import mysql.connector\n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\",database = \"DemoDatabase\")\n",
    "print(myconn) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<mysql.connector.connection_cext.CMySQLConnection object at 0x000002CB2E366278>\n",
      "CMySQLCursor: (Nothing executed yet)\n"
     ]
    }
   ],
   "source": [
    "#Creation of Cursor Objecct\n",
    "import mysql.connector\n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\",database = \"DemoDatabase\")\n",
    "print(myconn)\n",
    "cur = myconn.cursor()    \n",
    "print(cur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('anjalidb',)\n",
      "('demo',)\n",
      "('demodatabase',)\n",
      "('information_schema',)\n",
      "('manjula',)\n",
      "('mysql',)\n",
      "('performance_schema',)\n",
      "('sakila',)\n",
      "('sys',)\n",
      "('world',)\n",
      "('xyz',)\n",
      "('xyzz',)\n"
     ]
    }
   ],
   "source": [
    "#Getting the list of existing databases\n",
    "import mysql.connector  \n",
    "  \n",
    "#Create the connection object   \n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\")  \n",
    "  \n",
    "#creating the cursor object  \n",
    "cur = myconn.cursor()  \n",
    "  \n",
    "try:  \n",
    "    dbs = cur.execute(\"show databases\")  \n",
    "except:  \n",
    "    myconn.rollback()  \n",
    "for x in cur:  \n",
    "    print(x)  \n",
    "myconn.close()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('anjalidb',)\n",
      "('demo',)\n",
      "('demodatabase',)\n",
      "('information_schema',)\n",
      "('manjula',)\n",
      "('mysql',)\n",
      "('performance_schema',)\n",
      "('sakila',)\n",
      "('sys',)\n",
      "('world',)\n",
      "('xyz',)\n",
      "('xyzz',)\n"
     ]
    }
   ],
   "source": [
    "#Creating the new database\n",
    "import mysql.connector  \n",
    "  \n",
    "#Create the connection object   \n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\")  \n",
    "  \n",
    "#creating the cursor object  \n",
    "cur = myconn.cursor()  \n",
    "  \n",
    "try:  \n",
    "    #creating a new database  \n",
    "    cur.execute(\"create database AnjaliDB\")  \n",
    "  \n",
    "    #getting the list of all the databases which will now include the new database PythonDB  \n",
    "    dbs = cur.execute(\"show databases\")  \n",
    "      \n",
    "except:  \n",
    "    myconn.rollback()  \n",
    "  \n",
    "for x in cur:  \n",
    "        print(x)  \n",
    "          \n",
    "myconn.close()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating the table\n",
    "import mysql.connector  \n",
    "  \n",
    "#Create the connection object   \n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\",database = \"AnjaliDB\")  \n",
    "  \n",
    "#creating the cursor object  \n",
    "cur = myconn.cursor()  \n",
    "  \n",
    "try:  \n",
    "    #Creating a table with name Employee having four columns i.e., name, id, salary, and department id  \n",
    "    dbs = cur.execute(\"create table Student(name varchar(20) not null, id int(20) not null primary key, salary float not null, Dept_id int not null)\")  \n",
    "except:  \n",
    "    myconn.rollback()  \n",
    "  \n",
    "myconn.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 record inserted!\n"
     ]
    }
   ],
   "source": [
    "#insert records into employee\n",
    "import mysql.connector  \n",
    "#Create the connection object   \n",
    "myconn = mysql.connector.connect(host = \"localhost\", user = \"root\",passwd = \"Manju@123\",database = \"AnjaliDB\")  \n",
    "#creating the cursor object  \n",
    "cur = myconn.cursor()  \n",
    "sql = \"insert into Student(name, id, salary, dept_id) values (%s, %s, %s, %s)\"  \n",
    "  \n",
    "#The row values are provided in the form of tuple   \n",
    "val = (\"John\", 110, 25000.00, 201)  \n",
    "  \n",
    "try:  \n",
    "    #inserting the values into the table  \n",
    "    cur.execute(sql,val)  \n",
    "  \n",
    "    #commit the transaction   \n",
    "    myconn.commit()  \n",
    "      \n",
    "except:  \n",
    "    myconn.rollback()  \n",
    " \n",
    "print(cur.rowcount,\"record inserted!\")  \n",
    "myconn.close() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   calories  duration\n",
      "0       420        50\n",
      "1       380        40\n",
      "2       390        45\n"
     ]
    }
   ],
   "source": [
    "#creating a data frame\n",
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "  \"calories\": [420, 380, 390],\n",
    "  \"duration\": [50, 40, 45]\n",
    "}\n",
    "\n",
    "#load data into a DataFrame object:\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(df) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contents of the DataFrame as read from the .csv file:\n",
      "   Student_id  Age  Grade  marks\n",
      "0       17004   10      5     30\n",
      "1       17003   11      5     89\n",
      "2       17002   11      5     67\n",
      "3       17001   11      5     50\n",
      "4       17005   10      5     45\n",
      "5       17006   10      5     72\n",
      "6       17007   11      5     92\n",
      "7       17008   10      5     29\n",
      "8       17009   11      5     85\n",
      "9       17010   10      5     65\n"
     ]
    }
   ],
   "source": [
    "#convert dtaframe into table\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "import pymysql\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Read CSV file into a pandas DataFrame instance\n",
    "\n",
    "dataFrame= pd.read_csv(r'C:\\Users\\HP\\source\\Student_Data.csv'); \n",
    "\n",
    "# Print the contents of the DataFrame onto the console\n",
    "\n",
    "print(\"Contents of the DataFrame as read from the .csv file:\");\n",
    "\n",
    "print(dataFrame);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contents of the DataFrame as read from the .csv file:\n",
      "   Student_id  Age  Grade  marks\n",
      "0       17004   10      5     30\n",
      "1       17003   11      5     89\n",
      "2       17002   11      5     67\n",
      "3       17001   11      5     50\n",
      "4       17005   10      5     45\n",
      "5       17006   10      5     72\n",
      "6       17007   11      5     92\n",
      "7       17008   10      5     29\n",
      "8       17009   11      5     85\n",
      "9       17010   10      5     65\n",
      "Table stdmarks created successfully.\n"
     ]
    }
   ],
   "source": [
    "#convert dtaframe into table\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "import pymysql\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Read CSV file into a pandas DataFrame instance\n",
    "\n",
    "dataFrame= pd.read_csv(r'C:\\Users\\HP\\source\\Student_Data.csv'); \n",
    "\n",
    "# Print the contents of the DataFrame onto the console\n",
    "\n",
    "print(\"Contents of the DataFrame as read from the .csv file:\");\n",
    "tableName=\"stdmarks\"\n",
    "\n",
    "print(dataFrame);\n",
    "sqlEngine=create_engine('mysql+pymysql://root:Manju@123@localhost/AnjaliDB')\n",
    "\n",
    "dbConnection=sqlEngine.connect() \n",
    "\n",
    "try:\n",
    "\n",
    "    frame=dataFrame.to_sql(tableName, dbConnection, if_exists='fail');\n",
    "\n",
    "except ValueError as vx:\n",
    "\n",
    "    print(vx)\n",
    "\n",
    "except Exception as ex:   \n",
    "\n",
    "    print(ex)\n",
    "\n",
    "else:\n",
    "\n",
    "    print(\"Table %s created successfully.\"%tableName);   \n",
    "\n",
    "finally:\n",
    "\n",
    "    dbConnection.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
